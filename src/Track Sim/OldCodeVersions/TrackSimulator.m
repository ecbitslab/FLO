%% TrackSimulator (Version 1.0 Date: 3-8-12 By: Anthony Ramirez)
% This script will create simulations of particle tracks seens in the data
% the 'BubbleTracker' data, to be anaylzed by our code.  This will allow us
% to calibrate the accuracy of the 'BT_Drive.m' code

%% Input Variables 
% Variable 'a' gives us the length of the image that will be produced
    % Note: Set to 1080 by default because the real frames are of the same
    %       length

a = 1080;               % Default = 1080



% Variable 'MinPa' gives the minimum percentage of 'a' that a tracks total
% length may be.  Variable 'MaxPa' gives the maximum percentage of 'a' that
% a tracks total length may be.

MinPa = .1;             % Default = .1
MaxPa = .25;             % Default = .5

% Variable 'MinC' gives the minimum number of centroids per track.  Variable
% 'MaxC' gives the maximum number of centroids per track.

MinC = 2;               % Default = 2
MaxC = 13;              % Default = 13

% Variable 'MinA' gives the minimum angle of deviation for some centroid.
% Variable 'MaxA' gives the maximum angle of deviation for some centroid.

MinA = -pi/32;               % Default = -pi/32
MaxA = pi/32;           % Default = pi/32 = 5 degrees

% Variable 'TotT' gives the total number of tracks in an image.

TotT = 20;         % Default = 20


%% Fixed Variables

% Variable 'ImRatio' gives of the image ratio between length and width.
    % Note: Set to 1920/1080 by default cause the real data is a 1080 by
    %       1920 matrix image

ImRatio = 1920/1080;    % Default = 1920/1080

% b is a function a that statisfies the ratio ImRatio

b = a*ImRatio;

% Frame is our coordinate matrix

Frame = zeros(a,b);

%% Origin Initial Track

%Random Length
Length = randi([round(MinPa*a) round(MaxPa*a)],1);  %temp round error
%Random Number of Centroids
Centroid = randi([MinC MaxC],1);
%Distance between each centroid
CDist = Length / (Centroid - 1);
%Angular Displacement
ADisp = MinA + (MaxA - MinA).*rand(1);

%Initial position of centroid
x = 1; 
y = round(b/2); 


P=1;
Frame(x,y) = P;             %P is for testing tracks with color



%This loop creates the additional centroid positions that follow the
%initial position.  If the position generated by the random number
%generator does not fall within the matrix 'Frame' the loop breaks
for k = 2:1:Centroid
    x = x + round(CDist*cos((k-1)*ADisp));
    if x <= 0 || x > a
        break
    end
    y = y + round(CDist*sin((k-1)*ADisp));
    if y <= 0 || y > b
        break
    end
    Frame(x,y) = P;
end

%% Random Track Maker

for w = 1:1:TotT
    x=randi([1 a],1);   %initial x
    y=randi([1 b],1);   %initial y
    %Random Length
    Length = randi([round(MinPa*a) round(MaxPa*a)],1);
    Centroid = randi([MinC MaxC],1);
    %Distance between each centroid
    CDist = Length / (Centroid - 1);
    %Angular Displacement
    ADisp = MinA + (MaxA - MinA).*rand(1);
    
    
    P=P+1 ;      %P again
    Frame(x,y) = P;
    
    for k = 2:1:Centroid
        x = x + round(CDist*cos((k-1)*ADisp));
        %To ensure that our coordinate 'x' is not outside the matrix
        %'Frame' we use an 'if' statement with a 'break' to prevent this
        if x <= 0 || x > a
            break
        end
        y = y + round(CDist*sin((k-1)*ADisp));
        %To ensure that our coordinate 'y' is not outside the matrix
        %'Frame' we use an 'if' statment with a 'break' to prevent this
        if y <= 0 || y > b
            break
        end
        
        
        Frame(x,y) = P;    %P 
    end
end

%% Colored Plot
%The first plot shows each track color coded.  Each track was given a
%number based on the order of its creation.  We then use a "find" function
%to color the individual track
[r c] = find(Frame > 0);
[r1 c1] = find(Frame == 1);
[r2 c2] = find(Frame == 2);
[r3 c3] = find(Frame == 3);
[r4 c4] = find(Frame == 4);
[r5 c5] = find(Frame == 5);
[r6 c6] = find(Frame == 6);
[r7 c7] = find(Frame == 7);
[r8 c8] = find(Frame == 8);
[r9 c9] = find(Frame == 9);
[r10 c10] = find(Frame == 10);
[r11 c11] = find(Frame == 11);
[r12 c12] = find(Frame == 12);
[r13 c13] = find(Frame == 13);
[r14 c14] = find(Frame == 14);
[r15 c15] = find(Frame == 15);
[r16 c16] = find(Frame == 16);
[r17 c17] = find(Frame == 17);
[r18 c18] = find(Frame == 18);
[r19 c19] = find(Frame == 19);
[r20 c20] = find(Frame == 20);
[r21 c21] = find(Frame == 21);
figure;
plot(c1,r1,'o-b',c2,r2,'o-r',c3,r3,'o-k',c4,r4,'o-g',c5,r5,'o-m',c6,r6,'o-c',...
    c7,r7,'oy',c8,r8,'o-b',c9,r9,'o-r',c10,r10,'o-k',c11,r11,'o-g',...
    c12,r12,'o-m',c13,r13,'o-m',c14,r14,'o-c',...
    c15,r15,'o-y',c16,r16,'o-b',c17,r17,'o-r',c18,r18,'o-k',c19,r19,'o-g',...
    c20,r20,'o-m',c21,r21,'o-m');
%% Non-colored Plot
%All the tracks are the same color (blue)
figure;
plot(c,r,'ob')
grid on








